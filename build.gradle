buildscript {
    ext.kotlin_version = '1.1.60'
    ext.corda_release_version = '3.1-corda'
    ext.spring_boot_version = '2.0.4.RELEASE'
    ext.junit_version = '4.12'

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
    }
}

apply plugin: 'kotlin'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()

    flatDir {
        dirs 'libs'
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile "net.corda:corda-rpc:$corda_release_version"
    compile "net.corda:corda-finance:$corda_release_version"

    testCompile group: 'junit', name: 'junit', version: '4.12'

    compile "org.springframework.boot:spring-boot-starter-web:$spring_boot_version"
    testCompile("org.springframework.boot:spring-boot-starter-test:$spring_boot_version")
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "junit:junit:$junit_version"

    compile "com.hmlr:cordapp-contracts-states:-SNAPSHOT"
    compile "com.hmlr:cordapp-flows:-SNAPSHOT"
    compile "com.hmlr:cordapp-common:-SNAPSHOT"

    compile "khttp:khttp:0.1.0"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

/*test{
    exclude 'com/hmlr/api/**'
}*/


bootJar {
    mainClassName = 'com.hmlr.api.ServerKt'
    baseName = 'conveyancer-api'
}

task runSpringServer(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.hmlr.api.ServerKt'

    if (project.hasProperty("serverPort")) {
        environment "server.port", findProperty('serverPort')
    }

    if (project.hasProperty("nodeIP") &&
            project.hasProperty("nodePort") &&
            project.hasProperty("nodeUsername") &&
            project.hasProperty("nodePassword") &&
            project.hasProperty("caseManagementApiUrl")) {
        environment "CONFIG_RPC_HOST", findProperty('nodeIP')
        environment "CONFIG_RPC_PORT", findProperty('nodePort')
        environment "CONFIG_RPC_USERNAME", findProperty('nodeUsername')
        environment "CONFIG_RPC_PASSWORD", findProperty('nodePassword')
        environment "CASE_MANAGEMENT_API_URL", findProperty("caseManagementApiUrl")
    }

    if (project.hasProperty("hmlrPartyOrganisation") &&
            project.hasProperty("hmlrPartyLocality") &&
            project.hasProperty("hmlrPartyCountry")) {
        environment "HMLR_PARTY_ORGANISATION", findProperty("hmlrPartyOrganisation")
        environment "HMLR_PARTY_LOCALITY", findProperty("hmlrPartyLocality")
        environment "HMLR_PARTY_COUNTRY", findProperty("hmlrPartyCountry")
        if (project.hasProperty("hmlrPartyState")) environment "HMLR_PARTY_STATE", findProperty("hmlrPartyState")
        if (project.hasProperty("hmlrPartyOrganisationalUnit")) environment "HMLR_PARTY_ORGANISATIONAL_UNIT", findProperty("hmlrPartyOrganisationalUnit")
        if (project.hasProperty("hmlrPartyCommonName")) environment "HMLR_PARTY_COMMON_NAME", findProperty("hmlrPartyCommonName")
    } else {
        environment "HMLR_PARTY_ORGANISATION", "HMLR"
        environment "HMLR_PARTY_LOCALITY", "Plymouth"
        environment "HMLR_PARTY_COUNTRY", "GB"
    }

    if (project.hasProperty("hmrcPartyOrganisation") &&
            project.hasProperty("hmrcPartyLocality") &&
            project.hasProperty("hmrcPartyCountry")) {
        environment "HMRC_PARTY_ORGANISATION", findProperty("hmrcPartyOrganisation")
        environment "HMRC_PARTY_LOCALITY", findProperty("hmrcPartyLocality")
        environment "HMRC_PARTY_COUNTRY", findProperty("hmrcPartyCountry")
        if (project.hasProperty("hmrcPartyState")) environment "HMRC_PARTY_STATE", findProperty("hmrcPartyState")
        if (project.hasProperty("hmrcPartyOrganisationalUnit")) environment "HMRC_PARTY_ORGANISATIONAL_UNIT", findProperty("hmrcPartyOrganisationalUnit")
        if (project.hasProperty("hmrcPartyCommonName")) environment "HMRC_PARTY_COMMON_NAME", findProperty("hmrcPartyCommonName")
    } else {
        environment "HMRC_PARTY_ORGANISATION", "HMRC"
        environment "HMRC_PARTY_LOCALITY", "London"
        environment "HMRC_PARTY_COUNTRY", "GB"
    }

    if (project.hasProperty("twilioAccountSid") &&
            project.hasProperty("twilioAuthToken") &&
            project.hasProperty("twilioPhoneNumber")) {
        environment "TWILIO_ACCOUNT_SID", findProperty('twilioAccountSid')
        environment "TWILIO_AUTH_TOKEN", findProperty('twilioAuthToken')
        environment "TWILIO_PHONE_NUMBER", findProperty('twilioPhoneNumber')
    }
    if (project.hasProperty("uiUrlAgreementSign")) environment "UI_URL_AGREEMENT_SIGN", findProperty('uiUrlAgreementSign')
    if (project.hasProperty("uiUrlTitleTransferred")) environment "UI_URL_TITLE_TRANSFERRED", findProperty('uiUrlTitleTransferred')
}
//e.g: ./gradlew runSpringServer -PserverPort=7006 -PnodeIP=192.168.249.61 -PnodePort=10003 -PnodeUsername=user1 -PnodePassword=letmein -PcaseManagementApiUrl="http://localhost:8004/v1" -uiUrlAgreementSign="http://localhost:7002/user/agreement-context?title_number=%titleNumber%"

